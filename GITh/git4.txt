REVERT
------

git revert <hash al que quiero revertir>

RESET
-----

git reset [tipo] <hash>

3 tipos de reset

--soft --> Mueve el HEAD y la RAMA al commit que le especificamos pero los cambios que teníamos antes
quedan en el staging area, como si recién hubiésemos hecho "git add"

--mixed --> Mueve el HEAD y la RAMA pero no conserva los cambios en el staging area. Sin embargo los 
conserva en el archivo, listo para hacer un git add si es necesario.

--hard --> Mueve el HEAD y la RAMA y los cambios no quedan en ningún lado.


Depuración de los repositorios
------------------------------
BLAME
-----

Nos devuelve en qué commit se introdujeron los cambios, quien los introdujo, fecha y hora.

git blame <nombre_de_un_archivo>

git blame -L 30,60 <nombre_del_archivo>


GREP
----

Se utiliza para hacer búsquedas, normalmente de una cadena de texto en archivos o log de commits.

git grep -n <string> 

git grep -c <string> --> Nos devuelve en qué archivo aparece y cuántas veces aparece.

Para buscar en el historial de commits

git log -S <string>


REFLOG
------

git reflog


Restauracion
------------

Habiendo hecho un "git reset --hard <hash>"
En el reflog me puedo fijar cual fue el hash del commit donde tenía los cambios que perdí.
Una vez que tenemos el hash del commit perdido, hacemos un switch con la opción --detach

git switch --detach <hash_perdido>

Creamos una nueva rama con los cambios que habíamos perdido

git switch -c <nombre_de_la_rama_nueva>

Si queremos fusionar con la rama principal o con la que queramos. Hacemos un switch a la rama con la
que queremos fusionarnos

git switch <rama>

Hacemos un merge

git merge <nombre_de_la_rama_nueva> --> la que habíamos creado con el switch -c

ALIAS
-----

Definimos alias para los comandos git

git config --global alias.<nombre_alias> "log --oneline --graph --all"

Para lanzar el comando usando el alias

git <nombre_alias>


Plantilla de commits
--------------------

Se trata de crear un archivo de texto con una plantilla para realizar un ingreso de información
standarizado.

Primer paso, crear el archivo de texto con los items a completar.
Luego agregar el archivo a la configuración global

git config --global commit.template <archivo_de_commit>

La próxima vez que se realice un commit, hacerlo sin ningún argumento.

git commit

Esto abrirá un editor de texto donde completaremos los items de la template. Al guardar y salir
se realizará el commit.

